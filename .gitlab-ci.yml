# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - security_test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."
    - echo "Build the code..."
      #- docker build -t $DOCKER_IMAGE_NAME $CI_PROJECT_DIR
      #- docker build -t $DOCKER_IMAGE_NAME https://gitlab-ci-token:$CI_JOB_TOKEN@nheo.duckdns.org:8443/charger/csms_server.git
      #- docker build -t $DOCKER_IMAGE_NAME /var/gitlab-runner/prd/csms-server
    - echo "Build docker complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 5
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

security_test-job:
  stage: security_test
  before_script:
    - sudo apt update  # 패키지 목록을 업데이트
    - sudo apt install -y python3-pip  # pip를 포함한 Python3를 설치
    - sudo ln -s /usr/bin/python3 /usr/bin/python
    - sudo pip install bandit
  script:
    - echo "Running security tests with Bandit..."
    - bandit -r src/
  allow_failure: true
  dependencies:
    - security_test-job

deploy-job:      # This job runs in the deploy stage.
  stage: deploy
  image: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DOCKER_USERNAME: $CI_DOCKER_USER  # GitLab Docker 레지스트리 사용자 이름
    DOCKER_PASSWORD: $CI_DOCKER_PASSWORD
    DOCKER_IMAGE_NAME: "kabina/csms-server"
    DOCKER_SOCKET_IMAGE_NAME: "kabina/socket-server"
    DOCKER_IMAGE_TAG: "latest"
  services:
    - name: docker:dind
      alias: docker
      command: ["--tls=false"]
  script:
    - echo $CI_DOCKER_USER
    - echo $CI_DOCKER_PASSWORD
    - echo "Docker deploy Start ..."

    - docker login -u $CI_DOCKER_USER -p $CI_DOCKER_PASSWORD
    - docker build -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG -f Dockerfile_gunicorn .
    - docker build -t $DOCKER_SOCKET_IMAGE_NAME:$DOCKER_IMAGE_TAG -f Dockerfile_websocket .
    - docker tag $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
    - docker tag $DOCKER_SOCKET_IMAGE_NAME:$DOCKER_IMAGE_TAG $DOCKER_SOCKET_IMAGE_NAME:$DOCKER_IMAGE_TAG
    - docker push $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
    - docker push $DOCKER_SOCKET_IMAGE_NAME:$DOCKER_IMAGE_TAG
    - docker images
    - sleep 10
    - echo $DOCKER_IMAGE_NAME $DOCKER_IMAGE_TAG
      #- docker run -d -p 5000:5000 $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
    #- docker run -d -p 8765:8765 csms-server-websocket
    - docker ps
    - sleep 10
    - docker ps -a
    - docker images
    - echo "Docker deploy complete ..."
  after_script:
    - docker login -u $CI_DOCKER_USER -p $CI_DOCKER_PASSWORD
    - docker pull $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
    - docker pull $DOCKER_SOCKET_IMAGE_NAME:$DOCKER_IMAGE_TAG
    - docker run -d -p 5000:5000 $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
    - docker run -d -p 8765:8765 $DOCKER_SOCKET_IMAGE_NAME:$DOCKER_IMAGE_TAG

  rules:
    - changes:
        - "src/**/*"
      when: always

