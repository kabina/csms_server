# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy
  - docker-deploy

variables:
  DOCKER_IMAGE_NAME: "csms-server"
  DOCKER_IMAGE_TAG: "latest"
    #CI_SERVER_TLS_CA_FILE: "/etc/gitlab-runner/nheo.duckdns.org.crt"


build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Build the code..."
      docker build -t $DOCKER_IMAGE_NAME $CI_PROJECT_DIR
      #- docker build -t $DOCKER_IMAGE_NAME https://gitlab-ci-token:$CI_JOB_TOKEN@nheo.duckdns.org:8443/charger/csms_server.git
      #- docker build -t $DOCKER_IMAGE_NAME /var/gitlab-runner/prd/csms-server
    - echo "Build docker complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 10
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: docker-deploy
  script:
    - echo "deploy Start ..."
      #- mkdir -p /var/gitlab-runner/csms-server  # 대상 디렉토리 생성
      #- rsync -av --exclude='.git/' $CI_PROJECT_DIR/ /var/gitlab-runner/csms-server/  # 파일을 목적지 디렉토리로 복사

    - echo "deploy complete ..."

deploy-job-docker:      # This job runs in the deploy stage.
  stage: deploy
  script:
    #- docker build -t $DOCKER_IMAGE_NAME /var/gitlab-runner/prd/csms-server
    - echo "Docker deploy Start ..."
    - if docker ps -a | grep $DOCKER_IMAGE_NAME; then docker stop $DOCKER_IMAGE_NAME; fi
    # 중지된 컨테이너가 있다면 삭제
    - if docker ps -a | grep $DOCKER_IMAGE_NAME; then docker rm $DOCKER_IMAGE_NAME; fi
    # 새로운 이미지로 컨테이너 실행
    - docker run -p 5000:5000 $DOCKER_IMAGE_NAME ev_rest:app
    - echo "Docker deploy complete ..."

  rules:
    - changes:
        - "src/**/*"
      when: always
